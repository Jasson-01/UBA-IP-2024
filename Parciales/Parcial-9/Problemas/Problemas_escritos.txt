################ PROBLEMAS ESCRITOS PARCIAL9 ###################

PROBL-1) ########## 
PROMEDIO DE SALIDAS [ 2 puntos ]

Dado un diccionario donde la clave es el nombre de cada amigo y el valor es una lista de los tiempos (en minutos) registrados para cada sala de escape en capital, escribir una funcion en Python que devuelva un diccionario, En este nuevo diccionario, las claves deben ser los nombres de los amigos y los valores deben ser tuplas que indiquen la cantidad de salas de las que cada persona logro salir y el promedio de los tiempos de salida(solo considerando las salas de las que lograron salir)

Problema promedio_de_salidas (in registro: dict{String, seq(Z))) : dict{String, (Z x R)) {
REQUIERE: {Registro tiene por lo menos un integrante}
REQUIERE: {Todos los integrantes de registro tiene por lo menos un tiempo}
REQUIERE: {Todos los valores de registro tiene la misma longitud}
REQUIERE: {Todos los tiempos de los valores de registro estan entre 0 y 61 inclusive}
ASEGURA: {res tiene las mismas claves que registro}
ASEGURA: {El primer elemento de la tupla de res para un integrante, es la **cantidad de salas** con tiempo mayor estricta a 0 y menor estricto
           a 61 que figuran en sus valores de registro}
ASEGURA: {El segundo elemento de la tupla de res para un integrante, si la cantidad de salas de las que salio es mayor a 0: es el promedio 
          de salas con tiempo mayor estricto a 0 y menor estricto a 61 que figuran en sus valores de registro; sino es 0.0}
}

PROBL-2) ##########
TIEMPOS MAS RAPIDO [ 1 punto ]

Dada una lista con los tiempos (en minutos) registrados para cada sala de escape de capital, escribir una funcion en Python que devuelva la posicion (indice) en la cual se encuentra en el tiempo mas rapido, excluyendo las salas en las que no haya salido (0 o mayor a 60).

Problema tiempo_mas_rapido (in tiempos_salas: seq(Z))): Z{
REQUIERE: {Hay por lo menos un elemento en tiempos_salas entre 1 y 60 inclusive}
REQUIER: {Todos los tiempos en tiempos_salas estan entre 0 y 61 inclusive}
ASEGURA: {res es la posicion de la sala en tiempos_salas de la que mas rapido se salio (en caso que haya mas de una, devolver la primera, osea la de menor indice)}
}  

PROBL-3) ##########  
Racha mas larga [3 puntos]

dada una lista con los tiempos (en minuto) registrado para cada sala de escape a la que fue una persona, escribir una funcion en Python que devuelva una tupla con el indice de inicio y el indice de fin de la subsecuencia mas larga de salidas exitosas de salas de escape consecutivas.

problema racha_mas_larga (in tiempos: seq(Z)): (Z x Z) {
REQUIERE: {Hay por lo menos un elemento en tiempos entre 1 y 60 inclusive}
REQUIERE: {Todos los tiempos en tiempos estan entre 0 y 61 inclusive}
ASEGURA: {En la primera posicion de res esta la posicion (indice de la lista) de la sala que inicie la racha mas larga}
ASEGURA: {En la segunda posicion de res esta la posicion (indice de la lista) de la sala que finaliza la racha mas larga}
ASEGURA: {El elemento de la primer posicion de res en tiempos es mayor estricto 0 y menor estricto que 61}
ASEGURA: {El elemento de la segunda posiscion de res en tiempos es mayor estricto 0 y menor estricto que 61}
ASEGURA: {La primera posicion de res es menor o igual a la segunda posicion de res}
ASEGURA: {No hay valores iguales a 0 o a 61 en tiempos entre la primera posicion de res y la segunda posicion de res}
ASEGURA: {No hay otra subsecuencia de salidas exitosas, en tiempos, de mayor longitud que la que esta entre la primera posicion de res y la segunda posicion de res}
ASEGURA: { Si hay dos o mas subsecuencias de salidas exitosas de mayor longitud en tiempos, res debe contener la primera de ellas.}
}

PROBL-4) ##########
ESCAPE EN SOLITARIO [ 2 puntos]

Dada una matriz donde las columnas representan a cada amigo y las filas representan las salas de escape, y los valores son los tiempos (en minutos) registrados para cada sala (0 si no fueron, 61 si no salieron, y un numero entre 1 y 60 si salieron), escribir una funcion en Python que devuelva los indices de todas las filas (que representan las salas) en las cuales el primero, segundo y cuarto amigo no fueron (0), pero el tercero si fue (independiente de si salio o no).

Problema escape_en_solitario (in amigos_por_salas: seq(seq(Z))): seq(Z) {
REQUIERE: {Hay por lo menos una sala en amigos_por_salas}
REQUIERE: {Hay 4 amigos en amigos_por_salas}
REQUIERE: {Todos los tiempos en cada sala de amigos_por_salas estan entre 0 y 61 inclusive}
ASEGURA: {La longitud de res es menor igual que la longitud de amigos_por_salas}
ASEGHURA: {Por cada sala en amigos_por_salas cuyo rpimer, segundo y cuarto valor sea 0, y el tercer valor sea distinto de 0, la posicion de dicha sala en amigos_por_salas debe aparecer res}
ASEGURA: {Para todo i pertenciente a res se cumple que el primer, segundo y cuarto valor de amigos_por_salas[i] es 0, y el terecer valor es distinto de 0}.   

















































































